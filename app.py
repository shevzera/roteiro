import streamlit as st
import google.generativeai as genai

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="TikTok Script Generator",
    page_icon="üé¨",
    layout="wide"
)

# CSS customizado
st.markdown("""
<style>
    .script-box {
        background-color: #1E1E1E;
        padding: 20px;
        border-radius: 10px;
        border-left: 4px solid #FF0050;
        margin: 10px 0;
    }
    .prompt-box {
        background-color: #2D2D2D;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #00D9FF;
        margin: 10px 0;
    }
    .description-box {
        background-color: #1E1E1E;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #00FF88;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo
st.title("üé¨ TikTok Script Generator")
st.markdown("**Gere roteiros virais em ingl√™s + Image Prompts + Descri√ß√£o + Hashtags**")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√£o")
    api_key = st.text_input("Google Gemini API Key", type="password", help="Cole sua API key aqui")
    st.markdown("[üìñ Como pegar API Key](https://aistudio.google.com/apikey)")
    
    st.markdown("---")
    st.markdown("### üìè Especifica√ß√µes")
    st.info("‚úÖ Script: 1300-1500 caracteres\n\n‚úÖ Estilo: Viral\n\n‚úÖ P√∫blico: Americano\n\n‚úÖ Dura√ß√£o: ~60 segundos")

# Inputs principais
col1, col2 = st.columns([1, 1])

with col1:
    tema = st.text_area(
        "üìù Tema (em portugu√™s)",
        placeholder="Ex: A hist√≥ria sombria por tr√°s do McDonald's",
        height=150
    )

with col2:
    roteiro_exemplo = st.text_area(
        "üìÑ Roteiro Pronto (opcional)",
        placeholder="Se j√° tem um roteiro em portugu√™s, cole aqui. Caso contr√°rio, deixe vazio.",
        height=150
    )

# Bot√£o de gera√ß√£o
if st.button("üöÄ Gerar Conte√∫do Completo", type="primary", use_container_width=True):
    
    if not api_key:
        st.error("‚ö†Ô∏è Por favor, insira sua API Key na barra lateral!")
        st.stop()
    
    if not tema and not roteiro_exemplo:
        st.error("‚ö†Ô∏è Insira um tema OU um roteiro pronto!")
        st.stop()
    
    try:
        # Configurar Gemini
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        
        # Criar prompt
        if roteiro_exemplo:
            prompt = f"""
Voc√™ √© um especialista em criar conte√∫do viral para TikTok voltado para o p√∫blico AMERICANO.

TAREFA: Pegue este roteiro em portugu√™s e fa√ßa:

ROTEIRO ORIGINAL (portugu√™s):
{roteiro_exemplo}

REGRAS IMPORTANTES:
- O SCRIPT deve ter EXATAMENTE entre 1300-1500 caracteres (OBRIGAT√ìRIO)
- Se ficar curto, adicione mais detalhes, exemplos, ou expanda a narrativa
- Se ficar longo, n√£o corte conte√∫do importante, apenas seja mais conciso

ENTREGUE EXATAMENTE NESTE FORMATO:

SCRIPT|||
[Script completo aqui em ingl√™s, formatado para ElevenLabs com marca√ß√µes [PAUSE], [EMPHASIS], [BREATH], etc. Gancho viral nos primeiros 3 segundos. Linguagem simples e conversacional. DEVE TER 1300-1500 CARACTERES]

PROMPTS|||
0-5s: Cinematic [descri√ß√£o ULTRA detalhada da cena: composi√ß√£o espec√≠fica, tipo de lighting (ex: golden hour, neon, harsh shadows), camera angle preciso (ex: low angle, dutch tilt, POV), mood/atmosfera, paleta de cores RGB espec√≠fica, texturas vis√≠veis, movimento de c√¢mera]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

5-10s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

10-15s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

15-20s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

20-25s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

25-30s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

30-35s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

35-40s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

40-45s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

45-50s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

50-55s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

55-60s: Cinematic [descri√ß√£o ULTRA detalhada da cena com todos os detalhes: composi√ß√£o, lighting, angle, mood, cores, textura, movimento]. Hyper-realistic, 4K quality, dramatic lighting, professional color grading.

DESCRIPTION|||
[Descri√ß√£o de 150-200 caracteres para TikTok, engajante, com call-to-action americano]

[8-10 hashtags trending nos EUA separados por espa√ßo, mix de virais e espec√≠ficos do tema]
"""
        else:
            prompt = f"""
Voc√™ √© um especialista em criar conte√∫do VIRAL para TikTok voltado para o p√∫blico AMERICANO.

TEMA (em portugu√™s): {tema}

REGRAS IMPORTANTES:
- O SCRIPT deve ter EXATAMENTE entre 1300-1500 caracteres (OBRIGAT√ìRIO)
- Crie um roteiro COMPLETO e DETALHADO
- Se precisar, adicione contexto, exemplos, curiosidades para atingir o tamanho m√≠nimo
- Estilo VIRAL: gancho forte, curiosidade, storytelling impactante

ENTREGUE EXATAMENTE NESTE FORMATO:

SCRIPT|||
[Script completo aqui em ingl√™s, formatado para ElevenLabs com marca√ß√µes [PAUSE], [EMPHASIS], [BREATH], etc. Gancho viral nos primeiros 3 segundos. Linguagem simples e conversacional para p√∫blico americano. DEVE TER 1300-1500 CARACTERES]

PROMPTS|||
0-5s: Cinematic [descri√ß√£o ULTRA detalhada da cena: composi√ß√£o espec√≠fica (ex: rule of thirds, centered, asymmetric), tipo de lighting preciso (ex: golden hour, neon glow, rim lighting, dramatic shadows), camera angle espec√≠fico (ex: low angle shot, bird's eye view, dutch tilt, over-the-shoulder), mood/atmosfera clara (ex: tense, mysterious, nostalgic), paleta de cores espec√≠fica (ex: warm amber tones, cold blue hues, high contrast black and white), texturas vis√≠veis (ex: grainy film, smooth digital, rough concrete), movimento de c√¢mera (ex: slow zoom in, dolly push, handheld shake)]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

5-10s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

10-15s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

15-20s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

20-25s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

25-30s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

30-35s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

35-40s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

40-45s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

45-50s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

50-55s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

55-60s: Cinematic [mesma estrutura ultra detalhada com TODOS os elementos visuais espec√≠ficos]. Hyper-realistic, 4K quality, professional color grading, cinematic composition.

DESCRIPTION|||
[Descri√ß√£o de 150-200 caracteres para TikTok, engajante e clic√°vel, com call-to-action americano forte]

[8-10 hashtags trending nos EUA separados por espa√ßo, incluindo #fyp #viral e espec√≠ficos do tema]
"""
        
        # Gerar com loading
        with st.spinner("ü§ñ Gerando seu conte√∫do viral..."):
            response = model.generate_content(prompt)
            resultado = response.text
        
        # Parse do resultado
        try:
            partes = resultado.split("|||")
            
            script = partes[1].strip() if len(partes) > 1 else ""
            prompts_raw = partes[2].strip() if len(partes) > 2 else ""
            description_full = partes[3].strip() if len(partes) > 3 else ""
            
            # Separar prompts por linha
            prompts_list = [p.strip() for p in prompts_raw.split('\n') if p.strip()]
            
        except:
            st.error("Erro ao processar resposta. Tentando novamente...")
            st.stop()
        
        # Contador de caracteres
        char_count = len(script)
        
        # Valida√ß√£o do tamanho
        if char_count < 1300:
            st.warning(f"‚ö†Ô∏è Script muito curto ({char_count} chars). Gerando novamente...")
            st.rerun()
        elif char_count > 1500:
            st.warning(f"‚ö†Ô∏è Script muito longo ({char_count} chars). Ajustando...")
            script = script[:1500].rsplit('.', 1)[0] + '.'
            char_count = len(script)
        
        # Exibir resultado formatado
        st.success("‚úÖ Conte√∫do gerado com sucesso!")
        
        # M√©tricas
        col_counter1, col_counter2, col_counter3 = st.columns(3)
        with col_counter1:
            st.metric("üìä Caracteres do Script", f"{char_count}", 
                     delta=f"{char_count - 1300} do m√≠nimo" if char_count < 1400 else "Perfeito!")
        with col_counter2:
            st.metric("‚è±Ô∏è Dura√ß√£o Estimada", "~60s")
        with col_counter3:
            status = "‚úÖ Aprovado" if 1300 <= char_count <= 1500 else "‚ö†Ô∏è Fora do range"
            st.metric("Status", status)
        
        st.markdown("---")
        
        # ===== SCRIPT COM BOT√ÉO DE COPIAR =====
        st.markdown("### üéôÔ∏è SCRIPT (ElevenLabs Ready)")
        st.markdown('<div class="script-box">', unsafe_allow_html=True)
        st.markdown(script.replace("[PAUSE]", "**[PAUSE]**").replace("[EMPHASIS]", "**[EMPHASIS]**").replace("[BREATH]", "**[BREATH]**"))
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Bot√£o copiar script
        st.code(script, language="text")
        
        # ===== IMAGE PROMPTS COM BOT√ïES =====
        st.markdown("### üé® IMAGE PROMPTS (Sincronizados por Tempo)")
        
        for idx, prompt_line in enumerate(prompts_list):
            st.markdown(f"**{prompt_line.split(':')[0]}:**")
            prompt_content = ':'.join(prompt_line.split(':')[1:]).strip()
            
            # Box com o prompt
            st.markdown('<div class="prompt-box">', unsafe_allow_html=True)
            st.markdown(prompt_content)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Bot√£o copiar cada prompt
            st.code(prompt_content, language="text")
            st.markdown("---")
        
        # ===== DESCRIPTION + HASHTAGS JUNTOS =====
        st.markdown("### üìù DESCRIPTION + HASHTAGS (Copy & Paste para TikTok)")
        st.markdown('<div class="description-box">', unsafe_allow_html=True)
        st.markdown(description_full)
        st.markdown('</div>', unsafe
